package com.acme.gui;

import br.com.acme.model.AcademicLibrary;
import com.acme.logic.ALManager;
import com.acme.logic.LogErros;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * @author Mateus
 */
public class MainWindowForm extends javax.swing.JFrame {

    /**
     * Declaração de Usuário
     */
    AcademicLibrary library;

    /**
     * Este construtor cria um novo usuário usr(User). Por definição ele ja
     * estabele que ao iniciar a aplicação o botão de Log (jrbmiLog) esteja
     * marcado como ativo. Tmabém seta na classe LogErros a variavel isActive
     * como true(boolean). Cria o novo form MainWindowForm
     */
    public MainWindowForm() {
        initComponents();
        jrbmiLog.setSelected(true);
        LogErros.setIsActive(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jbmbNew = new javax.swing.JButton();
        jbmbOpen = new javax.swing.JButton();
        jbmbSave = new javax.swing.JButton();
        jbmbCreateAccount = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jmbMenu = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiNew = new javax.swing.JMenuItem();
        jmiOpen = new javax.swing.JMenuItem();
        jmiSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jmPublications = new javax.swing.JMenu();
        jmAdd = new javax.swing.JMenu();
        jmiAddBook = new javax.swing.JMenuItem();
        jmiAddArticle = new javax.swing.JMenuItem();
        jmList = new javax.swing.JMenu();
        jmiListBooks = new javax.swing.JMenuItem();
        jmiListArticles = new javax.swing.JMenuItem();
        jmAccounts = new javax.swing.JMenu();
        jmiCreate = new javax.swing.JMenuItem();
        jmiListAccounts = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiSupport = new javax.swing.JMenuItem();
        jcbmiUpdate = new javax.swing.JCheckBoxMenuItem();
        jmiAbout = new javax.swing.JMenuItem();
        jrbmiLog = new javax.swing.JRadioButtonMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Academic Library Control System");

        jbmbNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/new.png"))); // NOI18N
        jbmbNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbmbNewActionPerformed(evt);
            }
        });

        jbmbOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/open.png"))); // NOI18N
        jbmbOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbmbOpenActionPerformed(evt);
            }
        });

        jbmbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/save.png"))); // NOI18N
        jbmbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbmbSaveActionPerformed(evt);
            }
        });

        jbmbCreateAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/user_add.png"))); // NOI18N
        jbmbCreateAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbmbCreateAccountActionPerformed(evt);
            }
        });

        jToggleButton1.setText("jToggleButton1");

        jmFile.setMnemonic('A');
        jmFile.setText("File");

        jmiNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jmiNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/new.png"))); // NOI18N
        jmiNew.setText("New");
        jmiNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNewActionPerformed(evt);
            }
        });
        jmFile.add(jmiNew);

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmiOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/open.png"))); // NOI18N
        jmiOpen.setText("Open");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiOpenActionPerformed(evt);
            }
        });
        jmFile.add(jmiOpen);

        jmiSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmiSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/save.png"))); // NOI18N
        jmiSave.setText("Save");
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveActionPerformed(evt);
            }
        });
        jmFile.add(jmiSave);
        jmFile.add(jSeparator1);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jmiExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/exit.png"))); // NOI18N
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jmbMenu.add(jmFile);

        jmPublications.setText("Publications");

        jmAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/publication_add.png"))); // NOI18N
        jmAdd.setText("Add");

        jmiAddBook.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jmiAddBook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/add.png"))); // NOI18N
        jmiAddBook.setText("Book");
        jmiAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddBookActionPerformed(evt);
            }
        });
        jmAdd.add(jmiAddBook);

        jmiAddArticle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jmiAddArticle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/add.png"))); // NOI18N
        jmiAddArticle.setText("Article");
        jmiAddArticle.setToolTipText("");
        jmiAddArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAddArticleActionPerformed(evt);
            }
        });
        jmAdd.add(jmiAddArticle);

        jmPublications.add(jmAdd);

        jmList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/list.png"))); // NOI18N
        jmList.setText("List");

        jmiListBooks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/book.png"))); // NOI18N
        jmiListBooks.setText("Books");
        jmiListBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiListBooksActionPerformed(evt);
            }
        });
        jmList.add(jmiListBooks);

        jmiListArticles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/articles.png"))); // NOI18N
        jmiListArticles.setText("Articles");
        jmiListArticles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiListArticlesActionPerformed(evt);
            }
        });
        jmList.add(jmiListArticles);

        jmPublications.add(jmList);

        jmbMenu.add(jmPublications);

        jmAccounts.setText("Accounts");

        jmiCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/user_add.png"))); // NOI18N
        jmiCreate.setText("Create");
        jmiCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCreateActionPerformed(evt);
            }
        });
        jmAccounts.add(jmiCreate);

        jmiListAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/acme/gui/icons/list.png"))); // NOI18N
        jmiListAccounts.setText("List Accounts");
        jmiListAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiListAccountsActionPerformed(evt);
            }
        });
        jmAccounts.add(jmiListAccounts);

        jmbMenu.add(jmAccounts);

        jmHelp.setText("Help");

        jmiSupport.setText("Support");
        jmiSupport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSupportActionPerformed(evt);
            }
        });
        jmHelp.add(jmiSupport);

        jcbmiUpdate.setSelected(true);
        jcbmiUpdate.setText("Check for updates");
        jcbmiUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbmiUpdateActionPerformed(evt);
            }
        });
        jmHelp.add(jcbmiUpdate);

        jmiAbout.setText("About");
        jmiAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAboutActionPerformed(evt);
            }
        });
        jmHelp.add(jmiAbout);

        jrbmiLog.setSelected(true);
        jrbmiLog.setText("Log");
        jrbmiLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbmiLogActionPerformed(evt);
            }
        });
        jmHelp.add(jrbmiLog);

        jmbMenu.add(jmHelp);

        setJMenuBar(jmbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbmbNew, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbmbOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbmbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbmbCreateAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 498, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbmbNew, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbmbCreateAccount)
                    .addComponent(jbmbSave)
                    .addComponent(jbmbOpen))
                .addGap(0, 282, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
     * Cria novo form CreateAccountForm passando o usr do tipo User.
     *
     * @param evt Captura evento do item do menu Accounts - Create.
     */
    private void jmiCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCreateActionPerformed
        CreateAccountForm j = new CreateAccountForm(this, true);
        j.setVisible(true);
    }//GEN-LAST:event_jmiCreateActionPerformed

    /**
     * Existe um JFileChooser para seleção de arquivo onde o usuário pode
     * navegar para salvar.
     *
     * @param evt Captura evento do item do menu File - Save.
     */
    private void jmiSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveActionPerformed
        /**
         * Try-Catch (Try chama metodo persistLibrary passando o file com
         * caminho do arquivo. Catch chama metodo para gravar o log passando o
         * erro para gravação.
         */
        try {
            String z = "";
            JFileChooser file = new JFileChooser();
            file.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int i = file.showSaveDialog(null);
            if (i == 1) {
                z = "";

            } else {
                File arquivo = file.getSelectedFile();
                z = (arquivo.getPath());
                /**
                 * Criação de um file contendo o caminho onde deverá ser salvo
                 */
                File fi = new File(z);
                ALManager.persistLibrary(fi);
                JOptionPane.showMessageDialog(null, "Arquivo salvo com sucesso!");
            }

        } catch (IOException ex) {
            LogErros.gravarArquivo(ex);
        }
    }//GEN-LAST:event_jmiSaveActionPerformed

    /**
     * Existe um JFileChooser para seleção de arquivo onde o usuário pode
     * navegar para salvar.
     *
     * @param evt Captura evento do botão jmbmSave.
     */
    private void jbmbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbmbSaveActionPerformed
        jmiSaveActionPerformed(evt);
    }//GEN-LAST:event_jbmbSaveActionPerformed

    /**
     * Cria novo form CreateAccountForm passando o usr do tipo User.
     *
     * @param evt Captura evento do botão jbmbCreateAccount.
     */
    private void jbmbCreateAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbmbCreateAccountActionPerformed
        CreateAccountForm j = new CreateAccountForm(this, true);
        j.setVisible(true);
    }//GEN-LAST:event_jbmbCreateAccountActionPerformed

    /**
     * Cria novo form ListArticleForm
     *
     * @param evt Captura evento do item do menu Publications - List - Articles.
     */
    private void jmiListArticlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiListArticlesActionPerformed
        ListArticlesForm a = new ListArticlesForm(this, true);
        a.setVisible(true);
    }//GEN-LAST:event_jmiListArticlesActionPerformed

    /**
     * Exibe mensagem na tela passando algumas informações sobre o app.
     *
     * @param evt Captura evento do item do menu Help - About.
     */
    private void jmiAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAboutActionPerformed
        JOptionPane.showMessageDialog(null, "Library Unity v1.0 \n All Rights Reserved");
    }//GEN-LAST:event_jmiAboutActionPerformed

    /**
     * Cria novo form AddBookForm.
     *
     * @param evt Captura evento do item do menu Publications - Add - Book.
     */
    private void jmiAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddBookActionPerformed
        AddBookForm e = new AddBookForm(this, true);
        e.setVisible(true);
    }//GEN-LAST:event_jmiAddBookActionPerformed

    /**
     * Cria novo form AddArticleForm
     *
     * @param evt Captura evento do item do menu Publications - Add - Article.
     */
    private void jmiAddArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddArticleActionPerformed
        AddArticleForm q = new AddArticleForm(this, true);
        q.setVisible(true);
    }//GEN-LAST:event_jmiAddArticleActionPerformed

    /**
     * Cria novo form ListBooksForm.
     *
     * @param evt Captura evento do item do menu Publications - List - Books.
     */
    private void jmiListBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiListBooksActionPerformed
        ListBooksForm r = new ListBooksForm(this, true);
        r.setVisible(true);
    }//GEN-LAST:event_jmiListBooksActionPerformed

    /**
     * Cria novo form ListAccountsForm.
     *
     * @param evt Captura evento do item do menu Accounts - List Accounts.
     */
    private void jmiListAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiListAccountsActionPerformed
        ListAccountsForm w = new ListAccountsForm(this, true);
        w.setVisible(true);
    }//GEN-LAST:event_jmiListAccountsActionPerformed

    /**
     * Existe um JFileChooser para seleção de arquivo onde o usuário pode
     * navegar para selecionar o arquivo a ser carregado.
     *
     * @param evt Captura evento do item de menu File - Save.
     */
    private void jmiOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOpenActionPerformed
        /**
         * Envia um evento ao jbmbOpen que seria o icone no MainWindowForm
         */
        jbmbOpenActionPerformed(evt);
    }//GEN-LAST:event_jmiOpenActionPerformed

    /**
     * @param evt Captura evento do item do menu Help - Log.
     */
    private void jrbmiLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbmiLogActionPerformed

        /**
         * if-else. If, no momento em que é pressionado se ficar ativo entao vai
         * setar o isActive da classe LogErros como true. Else, no momento em
         * que o botão é pressionado se ficar desativado então vai setar o
         * isActive como false.
         */
        if (jrbmiLog.isSelected() == true) {
            LogErros.setIsActive(true);
        } else {
            LogErros.setIsActive(false);
        }
    }//GEN-LAST:event_jrbmiLogActionPerformed

    private void jcbmiUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbmiUpdateActionPerformed

    }//GEN-LAST:event_jcbmiUpdateActionPerformed

    /**
     * Exibe mensagem com o contato para suporte.
     *
     * @param evt Captura evento do item de menu Help - Support.
     */
    private void jmiSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSupportActionPerformed
        JOptionPane.showMessageDialog(null, "Contact Support\n\n Email: xxxxxxxxxxxxxxxxx\nTel: (xx) xxxx-xxxx");
    }//GEN-LAST:event_jmiSupportActionPerformed

    /**
     * Existe um JFileChooser para seleção de arquivo onde o usuário pode
     * navegar para selecionar o arquivo a ser carregado.
     *
     * @param evt Captura evento do botão jbmbOpen.
     */
    private void jbmbOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbmbOpenActionPerformed
        /**
         * Try-Catch (Try chama metodo loadLibrary passando o file com caminho
         * do arquivo que o usuário escolheu usando o FileChooser. Catch chama
         * metodo para gravar o log passando o erro para gravação.
         */
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                long i = selectedFile.length();
                if (i != 0) {
                    ALManager.loadLibrary(selectedFile);
                }
            }

        } catch (Exception e) {
            LogErros.gravarArquivo(e);
        }
    }//GEN-LAST:event_jbmbOpenActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Voce quer realmente sair?", "Pergunta", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNewActionPerformed
        jbmbNewActionPerformed(evt);
    }//GEN-LAST:event_jmiNewActionPerformed

    private void jbmbNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbmbNewActionPerformed
        NewForm novo = new NewForm();
        novo.setVisible(true);
    }//GEN-LAST:event_jbmbNewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton jbmbCreateAccount;
    private javax.swing.JButton jbmbNew;
    private javax.swing.JButton jbmbOpen;
    private javax.swing.JButton jbmbSave;
    private javax.swing.JCheckBoxMenuItem jcbmiUpdate;
    private javax.swing.JMenu jmAccounts;
    private javax.swing.JMenu jmAdd;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmList;
    private javax.swing.JMenu jmPublications;
    private javax.swing.JMenuBar jmbMenu;
    private javax.swing.JMenuItem jmiAbout;
    private javax.swing.JMenuItem jmiAddArticle;
    private javax.swing.JMenuItem jmiAddBook;
    private javax.swing.JMenuItem jmiCreate;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiListAccounts;
    private javax.swing.JMenuItem jmiListArticles;
    private javax.swing.JMenuItem jmiListBooks;
    private javax.swing.JMenuItem jmiNew;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSupport;
    private javax.swing.JRadioButtonMenuItem jrbmiLog;
    // End of variables declaration//GEN-END:variables
}
