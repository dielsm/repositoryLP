package Forms;

import Data.ModelTableUpgradeable;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Este form tem como objetivo proporcionar a interação entre as funções diponiveis
 * no form para realizar tarefas conjuntas ao banco de dados
 * @author Mateus
 */
public class updateFromTableList extends javax.swing.JFrame {

    ModelTableUpgradeable updateTable;
    static final String url = "jdbc:mysql://localhost/lp";

    /**
     * Creates new form updateFromTableList
     * Recebe login e senha do queryForm e
     * cria um novo modelo de tabela da classe ModelTableUpgradeable
     * @param login
     * @param pw
     */
    public updateFromTableList(String login, String pw) {
        try {
            this.updateTable = new ModelTableUpgradeable(url, login, pw);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Não foi possivel estabelecer conexão \ncom o banco de dados", "Message", 2);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbEditClientes = new javax.swing.JButton();
        jbEditProdutos = new javax.swing.JButton();
        jbEditVendedores = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();
        jbEditUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualizar");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Atualizar através da tabela"));

        jTable1.setModel(updateTable);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addContainerGap())
        );

        jbEditClientes.setText("Editar Clientes");
        jbEditClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditClientesActionPerformed(evt);
            }
        });

        jbEditProdutos.setText("Editar Produtos");
        jbEditProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditProdutosActionPerformed(evt);
            }
        });

        jbEditVendedores.setText("Editar Vendedores");
        jbEditVendedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditVendedoresActionPerformed(evt);
            }
        });

        jbExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/exit.png"))); // NOI18N
        jbExit.setText("Sair");
        jbExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExitActionPerformed(evt);
            }
        });

        jbEditUser.setText("Editar Usários");
        jbEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbEditVendedores)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jbEditProdutos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbEditClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jbEditUser))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jbExit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jbEditClientes)
                        .addGap(18, 18, 18)
                        .addComponent(jbEditProdutos)
                        .addGap(18, 18, 18)
                        .addComponent(jbEditVendedores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbEditUser)
                        .addGap(14, 14, 14)
                        .addComponent(jbExit, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * A ação sobre este botão exerce uma consulta no banco de dados sobre os
     * clientes e reestrutura a tabela, é possivel então fazer as alterações de
     * dados pela tabela
     *
     * @param evt
     */
    private void jbEditClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditClientesActionPerformed
        try {
            updateTable.setQuery("SELECT * FROM CLIENTE");
        } catch (IllegalStateException ex) {
            Logger.getLogger(updateFromTableList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbEditClientesActionPerformed

    /**
     * .
     * A ação sobre este botão exerce uma consulta no banco de dados sobre os
     * produtos e reestrutura a tabela, é possivel então fazer as alterações de
     * dados pela tabela
     *
     * @param evt
     */
    private void jbEditProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditProdutosActionPerformed
        try {
            updateTable.setQuery("SELECT * FROM PRODUTO");
        } catch (IllegalStateException ex) {
            Logger.getLogger(updateFromTableList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbEditProdutosActionPerformed

    /**
     * A ação sobre este botão exerce uma consulta no banco de dados sobre os
     * vendedores e reestrutura a tabela, é possivel então fazer as alterações
     * de dados pela tabela
     *
     * @param evt
     */
    private void jbEditVendedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditVendedoresActionPerformed
        try {
            updateTable.setQuery("SELECT * FROM VENDEDOR");
        } catch (IllegalStateException ex) {
            Logger.getLogger(updateFromTableList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbEditVendedoresActionPerformed

    /**
     * Este metodo chama o metodo para fechar os objetos e encerra o form
     *
     * @param evt
     */
    private void jbExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExitActionPerformed
        updateTable.disconnectFromDatabase();
        this.dispose();
    }//GEN-LAST:event_jbExitActionPerformed

    /**
     * A ação sobre este botão exerce uma consulta no banco de dados sobre os
     * usuários e reestrutura a tabela, é possivel então fazer as alterações de
     * dados pela tabela
     *
     * @param evt
     */
    private void jbEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditUserActionPerformed
        try {
            updateTable.setQuery("SELECT * FROM USUARIOS");
        } catch (IllegalStateException ex) {
            Logger.getLogger(updateFromTableList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbEditUserActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbEditClientes;
    private javax.swing.JButton jbEditProdutos;
    private javax.swing.JButton jbEditUser;
    private javax.swing.JButton jbEditVendedores;
    private javax.swing.JButton jbExit;
    // End of variables declaration//GEN-END:variables
}
